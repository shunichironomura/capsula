name: Test

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/test.yml"
      - "capsula/**"
      - "examples/**"
      - "tests/**"
      - "pyproject.toml"
      - "capsula.toml"
      - "tox.ini"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/test.yml"
      - "capsula/**"
      - "examples/**"
      - "tests/**"
      - "pyproject.toml"
      - "capsula.toml"
      - "tox.ini"
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.0"

jobs:
  ruff:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Extract Ruff version from pyproject.toml
        id: extract-ruff-version
        run: |
          echo "ruff_version=$(python -c "import tomllib;f=open('pyproject.toml', 'rb');print(tomllib.load(f)['tool']['poetry']['group']['dev']['dependencies']['ruff']);f.close()")" >> "$GITHUB_OUTPUT"
      - uses: chartboost/ruff-action@v1
        with:
          version: ${{ steps.extract-ruff-version.outputs.ruff_version }}

  mypy:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run mypy
        run: poetry run --no-interaction -- mypy --strict --python-version ${{ matrix.python-version }} .

  pytest:
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      COVERAGE_FILE: .coverage.${{ matrix.os }}-${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Poetry
      uses: abatilo/actions-poetry@v3
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run pytest
      run: poetry run --no-interaction -- coverage run --source=./capsula -m pytest ./tests --import-mode importlib

    - name: Generate coverage report
      run: |
        poetry run --no-interaction -- coverage report -m
        poetry run --no-interaction -- coverage xml -o ./coverage/coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage/
        file: coverage.xml
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
