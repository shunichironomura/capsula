name: Release
run-name: Release (`${{ github.sha }}`)

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  check-existing-tag:
    name: Ensure tag doesn't already exist
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Get the version
        id: get-version
        run: |
          echo "version=$(poetry version --short)" >> "$GITHUB_OUTPUT"

      - name: Make sure the tag doesn't already exist
        id: check-tag
        run: |
          git fetch --tags
          ! git rev-parse --verify "refs/tags/v${{ steps.get-version.outputs.version }}" > /dev/null

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: check-existing-tag
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Publish to PyPI
      run: |
        git fetch --tags
        git checkout ${{ needs.check-existing-tag.outputs.version }}
        poetry publish --build
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create a GitHub release
    runs-on: ubuntu-latest
    needs: check-existing-tag
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Create a GitHub release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release create v${{ needs.check-existing-tag.outputs.version }} --verify-tag --generate-notes --title "v${{ needs.check-existing-tag.outputs.version }}" --repo ${{ github.repository }} --target ${{ github.sha }}
