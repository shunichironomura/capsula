from __future__ import annotations

from typing import Any

from typing_extensions import Annotated, Doc

from ._encapsulator import Encapsulator, _CapsuleItemKey
from ._run import Run


def record(
    key: Annotated[_CapsuleItemKey, Doc("The key to use for the value.")],
    value: Annotated[Any, Doc("The value to record.")],
) -> None:
    """Record a value to the current encapsulator.

    See the example below:

    ```python
    import random
    import capsula

    @capsula.run()
    def calculate_pi(n_samples: int = 1_000, seed: int = 42) -> None:
        random.seed(seed)
        xs = (random.random() for _ in range(n_samples))
        ys = (random.random() for _ in range(n_samples))
        inside = sum(x * x + y * y <= 1.0 for x, y in zip(xs, ys))
        pi_estimate = (4.0 * inside) / n_samples

        # You can record values to the capsule using the `record` method.
        capsula.record("pi_estimate", pi_estimate)

    if __name__ == "__main__":
        calculate_pi(n_samples=1_000)
    ```

    The `in-run-report.json` generated by the `JsonDumpReporter` will contain the following:

    ```json
    {
    "pi_estimate": 3.128
    }
    ```
    """
    enc = Encapsulator.get_current()
    if enc is None:
        msg = "No active encapsulator found."
        raise RuntimeError(msg)
    enc.record(key, value)


def current_run_name() -> str:
    """Get the name of the current run, which is also the name of the run directory in the `vault` directory.

    `RuntimeError` will be raised if no active run is found.
    """
    run: Run[Any, Any] | None = Run.get_current()
    if run is None:
        msg = "No active run found."
        raise RuntimeError(msg)
    return run.run_dir.name
