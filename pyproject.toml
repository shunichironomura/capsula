[tool.poetry]
name = "capsula"
version = "0.1.0"
description = "A Python package to capture and reproduce command execution context"
license = "MIT"
authors = ["Shunichiro Nomura <nomura@space.t.u-tokyo.ac.jp>"]
readme = "README.md"
repository = "https://github.com/shunichironomura/capsula"
keywords = ["reproducibility", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]
packages = [{ include = "capsula" }]

[tool.poetry.dependencies]
python = ">=3.8"
click = ">=8.1.3"
pydantic = ">=2.0.2"
py-cpuinfo = ">=9.0.0"
gitpython = ">=3.1.31"
tomli = { version = ">=2.0.1", python = "<3.11" }
typing-extensions = { version = ">=4.7.1", python = "<3.11" }
orjson = ">=3.9.12"

[tool.poetry.group.dev.dependencies]
ruff = "0.2.0"
mypy = "1.8.0"
pytest = "8.0.0"
coverage = "7.4.1"
genbadge = { extras = ["coverage"], version = "1.1.1" }
tomli-w = "1.0.0"

# [tool.poetry.scripts]
# capsula = "capsula.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[[tool.mypy.overrides]]
module = ["cpuinfo", "matplotlib.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
preview = true
explicit-preview-rules = true

select = ["ALL", "RUF022"]
ignore = [
    "PLR2004", # magic numbers
    "S101",    # use of assert
    "G",       # logging format
    "ANN101",  # missing type annotation for self in method
    "ANN102",  # missing type annotation for cls in classmethod
    "D100",    # missing docstring in public module
    "D101",    # missing docstring in public class
    "D102",    # missing docstring in public method
    "D103",    # missing docstring in public function
    "D104",    # missing docstring in public package
    "D105",    # missing docstring in magic method
    "D107",    # missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D213",    # multi-line docstring summary should start at the second line
    "PGH003",  # Use specific rule codes when ignoring type issues
    "RET505",  # Unnecessary `else` after `return` statement
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "D401",    # First line should be in imperative mood
    "TD002",   # Missing author in TODO
    "TD003",   # add link on issue into TODO
    "PLR0913", # Too many arguments to function call
    "D407",    # Missing dashed underline after section
    "ERA001",  # Commented out code
]


[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.pyupgrade]
# Keep runtime typing for Pydantic.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "INP001", # implicit-namespace-package
]
"capsula/_backport.py" = [
    "ANN202", # Missing return type annotation
    "SIM108", # Use ternary operator instead of if/else
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102",  # Exception must not use an f-string literal, assign to variable first"
]
