[tool.poetry]
name = "capsula"
version = "0.0.2"
description = "A Python package to capture and reproduce command execution contexts"
authors = ["Shunichiro Nomura <nomura@space.t.u-tokyo.ac.jp>"]
license = "MIT"
readme = "README.md"
packages = [{include = "capsula"}]

[tool.poetry.dependencies]
python = ">=3.11"
click = ">=8.1.3"
pydantic = {version = ">=2.0b3", allow-prereleases = true}
py-cpuinfo = ">=9.0.0"
gitpython = ">=3.1.31"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.0.275"
black = ">=23.3.0"
mypy = ">=1.4.0"
pre-commit = ">=3.3.3"
pytest = ">=7.4.0"

[tool.poetry.scripts]
capsula = "capsula.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'
target-version = ["py311"]

exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
# Same as Black.
line-length = 120
select = ["ALL"]
ignore = [
    # "PLR2004", # magic numbers
    "S101", # use of assert
    "G", # logging format
    "ANN101", # missing type annotation for self in method
    "ANN102", # missing type annotation for cls in classmethod
    "D100", # missing docstring in public module
    "D101", # missing docstring in public class
    "D102", # missing docstring in public method
    "D103", # missing docstring in public function
    "D104", # missing docstring in public package
    "D105", # missing docstring in magic method
    "D107", # missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D213", # multi-line docstring summary should start at the second line
    "PGH003", # Use specific rule codes when ignoring type issues
    "RET505", # Unnecessary `else` after `return` statement
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    # "TD002", # Missing author in TODO
    "TD003", # add link on issue into TODO
    "PLR0913", # Too many arguments to function call
    "D407", # Missing dashed underline after section
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    # "ANN201",
]
# "scripts/*" = [
#     "INP001",
# ]

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/shunichironomura/capsula/"

[tool.tbump.version]
current = "0.0.2"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"
search = 'version = "{current_version}"'

[[tool.tbump.file]]
src = "capsula/_version.py"
search = '__version__ = "{current_version}"'

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
[[tool.tbump.after_push]]
name = "GitHub release"
cmd = "gh release create v{new_version} --generate-notes"

[[tool.tbump.after_push]]
name = "PyPI release"
cmd = "poetry publish --build"
